// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetProtocConfig.proto

#ifndef PROTOBUF_NetProtocConfig_2eproto__INCLUDED
#define PROTOBUF_NetProtocConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_NetProtocConfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsChatRecord_HeadInforImpl();
void InitDefaultsChatRecord_HeadInfor();
void InitDefaultsChatRecordImpl();
void InitDefaultsChatRecord();
void InitDefaultsAddInformationImpl();
void InitDefaultsAddInformation();
void InitDefaultsUser_loginUserImpl();
void InitDefaultsUser_loginUser();
void InitDefaultsUserImpl();
void InitDefaultsUser();
void InitDefaultsChatRecord_Group_HeadInforImpl();
void InitDefaultsChatRecord_Group_HeadInfor();
void InitDefaultsChatRecord_GroupImpl();
void InitDefaultsChatRecord_Group();
void InitDefaultsStateInformationImpl();
void InitDefaultsStateInformation();
void InitDefaultsprotocolImpl();
void InitDefaultsprotocol();
inline void InitDefaults() {
  InitDefaultsChatRecord_HeadInfor();
  InitDefaultsChatRecord();
  InitDefaultsAddInformation();
  InitDefaultsUser_loginUser();
  InitDefaultsUser();
  InitDefaultsChatRecord_Group_HeadInfor();
  InitDefaultsChatRecord_Group();
  InitDefaultsStateInformation();
  InitDefaultsprotocol();
}
}  // namespace protobuf_NetProtocConfig_2eproto
class AddInformation;
class AddInformationDefaultTypeInternal;
extern AddInformationDefaultTypeInternal _AddInformation_default_instance_;
class ChatRecord;
class ChatRecordDefaultTypeInternal;
extern ChatRecordDefaultTypeInternal _ChatRecord_default_instance_;
class ChatRecord_Group;
class ChatRecord_GroupDefaultTypeInternal;
extern ChatRecord_GroupDefaultTypeInternal _ChatRecord_Group_default_instance_;
class ChatRecord_Group_HeadInfor;
class ChatRecord_Group_HeadInforDefaultTypeInternal;
extern ChatRecord_Group_HeadInforDefaultTypeInternal _ChatRecord_Group_HeadInfor_default_instance_;
class ChatRecord_HeadInfor;
class ChatRecord_HeadInforDefaultTypeInternal;
extern ChatRecord_HeadInforDefaultTypeInternal _ChatRecord_HeadInfor_default_instance_;
class StateInformation;
class StateInformationDefaultTypeInternal;
extern StateInformationDefaultTypeInternal _StateInformation_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class User_loginUser;
class User_loginUserDefaultTypeInternal;
extern User_loginUserDefaultTypeInternal _User_loginUser_default_instance_;
class protocol;
class protocolDefaultTypeInternal;
extern protocolDefaultTypeInternal _protocol_default_instance_;

enum ChatRecord_contenttype {
  ChatRecord_contenttype_file = 0,
  ChatRecord_contenttype_image = 1,
  ChatRecord_contenttype_text = 2,
  ChatRecord_contenttype_video = 3,
  ChatRecord_contenttype_folder = 4,
  ChatRecord_contenttype_audio = 5,
  ChatRecord_contenttype_ChatRecord_contenttype_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChatRecord_contenttype_ChatRecord_contenttype_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChatRecord_contenttype_IsValid(int value);
const ChatRecord_contenttype ChatRecord_contenttype_contenttype_MIN = ChatRecord_contenttype_file;
const ChatRecord_contenttype ChatRecord_contenttype_contenttype_MAX = ChatRecord_contenttype_audio;
const int ChatRecord_contenttype_contenttype_ARRAYSIZE = ChatRecord_contenttype_contenttype_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatRecord_contenttype_descriptor();
inline const ::std::string& ChatRecord_contenttype_Name(ChatRecord_contenttype value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatRecord_contenttype_descriptor(), value);
}
inline bool ChatRecord_contenttype_Parse(
    const ::std::string& name, ChatRecord_contenttype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatRecord_contenttype>(
    ChatRecord_contenttype_descriptor(), name, value);
}
enum AddInformation_TargetType {
  AddInformation_TargetType_isGroup = 0,
  AddInformation_TargetType_isFriend = 1,
  AddInformation_TargetType_AddInformation_TargetType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AddInformation_TargetType_AddInformation_TargetType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AddInformation_TargetType_IsValid(int value);
const AddInformation_TargetType AddInformation_TargetType_TargetType_MIN = AddInformation_TargetType_isGroup;
const AddInformation_TargetType AddInformation_TargetType_TargetType_MAX = AddInformation_TargetType_isFriend;
const int AddInformation_TargetType_TargetType_ARRAYSIZE = AddInformation_TargetType_TargetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddInformation_TargetType_descriptor();
inline const ::std::string& AddInformation_TargetType_Name(AddInformation_TargetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddInformation_TargetType_descriptor(), value);
}
inline bool AddInformation_TargetType_Parse(
    const ::std::string& name, AddInformation_TargetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddInformation_TargetType>(
    AddInformation_TargetType_descriptor(), name, value);
}
enum ChatRecord_Group_contenttype {
  ChatRecord_Group_contenttype_file = 0,
  ChatRecord_Group_contenttype_image = 1,
  ChatRecord_Group_contenttype_text = 2,
  ChatRecord_Group_contenttype_folder = 3,
  ChatRecord_Group_contenttype_audio = 4,
  ChatRecord_Group_contenttype_ChatRecord_Group_contenttype_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChatRecord_Group_contenttype_ChatRecord_Group_contenttype_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChatRecord_Group_contenttype_IsValid(int value);
const ChatRecord_Group_contenttype ChatRecord_Group_contenttype_contenttype_MIN = ChatRecord_Group_contenttype_file;
const ChatRecord_Group_contenttype ChatRecord_Group_contenttype_contenttype_MAX = ChatRecord_Group_contenttype_audio;
const int ChatRecord_Group_contenttype_contenttype_ARRAYSIZE = ChatRecord_Group_contenttype_contenttype_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatRecord_Group_contenttype_descriptor();
inline const ::std::string& ChatRecord_Group_contenttype_Name(ChatRecord_Group_contenttype value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatRecord_Group_contenttype_descriptor(), value);
}
inline bool ChatRecord_Group_contenttype_Parse(
    const ::std::string& name, ChatRecord_Group_contenttype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatRecord_Group_contenttype>(
    ChatRecord_Group_contenttype_descriptor(), name, value);
}
enum StateInformation_StateMsg {
  StateInformation_StateMsg_Online = 0,
  StateInformation_StateMsg_offline = 1,
  StateInformation_StateMsg_hide = 2,
  StateInformation_StateMsg_dontexcuse = 3,
  StateInformation_StateMsg_StateInformation_StateMsg_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StateInformation_StateMsg_StateInformation_StateMsg_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StateInformation_StateMsg_IsValid(int value);
const StateInformation_StateMsg StateInformation_StateMsg_StateMsg_MIN = StateInformation_StateMsg_Online;
const StateInformation_StateMsg StateInformation_StateMsg_StateMsg_MAX = StateInformation_StateMsg_dontexcuse;
const int StateInformation_StateMsg_StateMsg_ARRAYSIZE = StateInformation_StateMsg_StateMsg_MAX + 1;

const ::google::protobuf::EnumDescriptor* StateInformation_StateMsg_descriptor();
inline const ::std::string& StateInformation_StateMsg_Name(StateInformation_StateMsg value) {
  return ::google::protobuf::internal::NameOfEnum(
    StateInformation_StateMsg_descriptor(), value);
}
inline bool StateInformation_StateMsg_Parse(
    const ::std::string& name, StateInformation_StateMsg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StateInformation_StateMsg>(
    StateInformation_StateMsg_descriptor(), name, value);
}
enum protocol_MsgType {
  protocol_MsgType_tcp = 0,
  protocol_MsgType_udp = 1,
  protocol_MsgType_http = 2,
  protocol_MsgType_smtp = 3,
  protocol_MsgType_ftp = 4,
  protocol_MsgType_stateInfor = 5,
  protocol_MsgType_protocol_MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  protocol_MsgType_protocol_MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool protocol_MsgType_IsValid(int value);
const protocol_MsgType protocol_MsgType_MsgType_MIN = protocol_MsgType_tcp;
const protocol_MsgType protocol_MsgType_MsgType_MAX = protocol_MsgType_stateInfor;
const int protocol_MsgType_MsgType_ARRAYSIZE = protocol_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* protocol_MsgType_descriptor();
inline const ::std::string& protocol_MsgType_Name(protocol_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    protocol_MsgType_descriptor(), value);
}
inline bool protocol_MsgType_Parse(
    const ::std::string& name, protocol_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<protocol_MsgType>(
    protocol_MsgType_descriptor(), name, value);
}
enum protocol_Chat_OneorMultiple {
  protocol_Chat_OneorMultiple_one = 0,
  protocol_Chat_OneorMultiple_multiple = 1,
  protocol_Chat_OneorMultiple_protocol_Chat_OneorMultiple_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  protocol_Chat_OneorMultiple_protocol_Chat_OneorMultiple_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool protocol_Chat_OneorMultiple_IsValid(int value);
const protocol_Chat_OneorMultiple protocol_Chat_OneorMultiple_Chat_OneorMultiple_MIN = protocol_Chat_OneorMultiple_one;
const protocol_Chat_OneorMultiple protocol_Chat_OneorMultiple_Chat_OneorMultiple_MAX = protocol_Chat_OneorMultiple_multiple;
const int protocol_Chat_OneorMultiple_Chat_OneorMultiple_ARRAYSIZE = protocol_Chat_OneorMultiple_Chat_OneorMultiple_MAX + 1;

const ::google::protobuf::EnumDescriptor* protocol_Chat_OneorMultiple_descriptor();
inline const ::std::string& protocol_Chat_OneorMultiple_Name(protocol_Chat_OneorMultiple value) {
  return ::google::protobuf::internal::NameOfEnum(
    protocol_Chat_OneorMultiple_descriptor(), value);
}
inline bool protocol_Chat_OneorMultiple_Parse(
    const ::std::string& name, protocol_Chat_OneorMultiple* value) {
  return ::google::protobuf::internal::ParseNamedEnum<protocol_Chat_OneorMultiple>(
    protocol_Chat_OneorMultiple_descriptor(), name, value);
}
// ===================================================================

class ChatRecord_HeadInfor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatRecord.HeadInfor) */ {
 public:
  ChatRecord_HeadInfor();
  virtual ~ChatRecord_HeadInfor();

  ChatRecord_HeadInfor(const ChatRecord_HeadInfor& from);

  inline ChatRecord_HeadInfor& operator=(const ChatRecord_HeadInfor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatRecord_HeadInfor(ChatRecord_HeadInfor&& from) noexcept
    : ChatRecord_HeadInfor() {
    *this = ::std::move(from);
  }

  inline ChatRecord_HeadInfor& operator=(ChatRecord_HeadInfor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRecord_HeadInfor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatRecord_HeadInfor* internal_default_instance() {
    return reinterpret_cast<const ChatRecord_HeadInfor*>(
               &_ChatRecord_HeadInfor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChatRecord_HeadInfor* other);
  friend void swap(ChatRecord_HeadInfor& a, ChatRecord_HeadInfor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatRecord_HeadInfor* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatRecord_HeadInfor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatRecord_HeadInfor& from);
  void MergeFrom(const ChatRecord_HeadInfor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatRecord_HeadInfor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 FileSize = 1;
  void clear_filesize();
  static const int kFileSizeFieldNumber = 1;
  ::google::protobuf::uint64 filesize() const;
  void set_filesize(::google::protobuf::uint64 value);

  // bool isConsent = 3;
  void clear_isconsent();
  static const int kIsConsentFieldNumber = 3;
  bool isconsent() const;
  void set_isconsent(bool value);

  // @@protoc_insertion_point(class_scope:ChatRecord.HeadInfor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 filesize_;
  bool isconsent_;
  mutable int _cached_size_;
  friend struct ::protobuf_NetProtocConfig_2eproto::TableStruct;
  friend void ::protobuf_NetProtocConfig_2eproto::InitDefaultsChatRecord_HeadInforImpl();
};
// -------------------------------------------------------------------

class ChatRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatRecord) */ {
 public:
  ChatRecord();
  virtual ~ChatRecord();

  ChatRecord(const ChatRecord& from);

  inline ChatRecord& operator=(const ChatRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatRecord(ChatRecord&& from) noexcept
    : ChatRecord() {
    *this = ::std::move(from);
  }

  inline ChatRecord& operator=(ChatRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatRecord* internal_default_instance() {
    return reinterpret_cast<const ChatRecord*>(
               &_ChatRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ChatRecord* other);
  friend void swap(ChatRecord& a, ChatRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatRecord& from);
  void MergeFrom(const ChatRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChatRecord_HeadInfor HeadInfor;

  typedef ChatRecord_contenttype contenttype;
  static const contenttype file =
    ChatRecord_contenttype_file;
  static const contenttype image =
    ChatRecord_contenttype_image;
  static const contenttype text =
    ChatRecord_contenttype_text;
  static const contenttype video =
    ChatRecord_contenttype_video;
  static const contenttype folder =
    ChatRecord_contenttype_folder;
  static const contenttype audio =
    ChatRecord_contenttype_audio;
  static inline bool contenttype_IsValid(int value) {
    return ChatRecord_contenttype_IsValid(value);
  }
  static const contenttype contenttype_MIN =
    ChatRecord_contenttype_contenttype_MIN;
  static const contenttype contenttype_MAX =
    ChatRecord_contenttype_contenttype_MAX;
  static const int contenttype_ARRAYSIZE =
    ChatRecord_contenttype_contenttype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  contenttype_descriptor() {
    return ChatRecord_contenttype_descriptor();
  }
  static inline const ::std::string& contenttype_Name(contenttype value) {
    return ChatRecord_contenttype_Name(value);
  }
  static inline bool contenttype_Parse(const ::std::string& name,
      contenttype* value) {
    return ChatRecord_contenttype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes content = 3;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // bytes targetNumber = 5;
  void clear_targetnumber();
  static const int kTargetNumberFieldNumber = 5;
  const ::std::string& targetnumber() const;
  void set_targetnumber(const ::std::string& value);
  #if LANG_CXX11
  void set_targetnumber(::std::string&& value);
  #endif
  void set_targetnumber(const char* value);
  void set_targetnumber(const void* value, size_t size);
  ::std::string* mutable_targetnumber();
  ::std::string* release_targetnumber();
  void set_allocated_targetnumber(::std::string* targetnumber);

  // bytes selfNumber = 6;
  void clear_selfnumber();
  static const int kSelfNumberFieldNumber = 6;
  const ::std::string& selfnumber() const;
  void set_selfnumber(const ::std::string& value);
  #if LANG_CXX11
  void set_selfnumber(::std::string&& value);
  #endif
  void set_selfnumber(const char* value);
  void set_selfnumber(const void* value, size_t size);
  ::std::string* mutable_selfnumber();
  ::std::string* release_selfnumber();
  void set_allocated_selfnumber(::std::string* selfnumber);

  // .ChatRecord.HeadInfor head = 7;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 7;
  const ::ChatRecord_HeadInfor& head() const;
  ::ChatRecord_HeadInfor* release_head();
  ::ChatRecord_HeadInfor* mutable_head();
  void set_allocated_head(::ChatRecord_HeadInfor* head);

  // uint64 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // .ChatRecord.contenttype type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ChatRecord_contenttype type() const;
  void set_type(::ChatRecord_contenttype value);

  // bool isSelf = 4;
  void clear_isself();
  static const int kIsSelfFieldNumber = 4;
  bool isself() const;
  void set_isself(bool value);

  // @@protoc_insertion_point(class_scope:ChatRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr targetnumber_;
  ::google::protobuf::internal::ArenaStringPtr selfnumber_;
  ::ChatRecord_HeadInfor* head_;
  ::google::protobuf::uint64 time_;
  int type_;
  bool isself_;
  mutable int _cached_size_;
  friend struct ::protobuf_NetProtocConfig_2eproto::TableStruct;
  friend void ::protobuf_NetProtocConfig_2eproto::InitDefaultsChatRecordImpl();
};
// -------------------------------------------------------------------

class AddInformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AddInformation) */ {
 public:
  AddInformation();
  virtual ~AddInformation();

  AddInformation(const AddInformation& from);

  inline AddInformation& operator=(const AddInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddInformation(AddInformation&& from) noexcept
    : AddInformation() {
    *this = ::std::move(from);
  }

  inline AddInformation& operator=(AddInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddInformation* internal_default_instance() {
    return reinterpret_cast<const AddInformation*>(
               &_AddInformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AddInformation* other);
  friend void swap(AddInformation& a, AddInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddInformation* New() const PROTOBUF_FINAL { return New(NULL); }

  AddInformation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddInformation& from);
  void MergeFrom(const AddInformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AddInformation_TargetType TargetType;
  static const TargetType isGroup =
    AddInformation_TargetType_isGroup;
  static const TargetType isFriend =
    AddInformation_TargetType_isFriend;
  static inline bool TargetType_IsValid(int value) {
    return AddInformation_TargetType_IsValid(value);
  }
  static const TargetType TargetType_MIN =
    AddInformation_TargetType_TargetType_MIN;
  static const TargetType TargetType_MAX =
    AddInformation_TargetType_TargetType_MAX;
  static const int TargetType_ARRAYSIZE =
    AddInformation_TargetType_TargetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TargetType_descriptor() {
    return AddInformation_TargetType_descriptor();
  }
  static inline const ::std::string& TargetType_Name(TargetType value) {
    return AddInformation_TargetType_Name(value);
  }
  static inline bool TargetType_Parse(const ::std::string& name,
      TargetType* value) {
    return AddInformation_TargetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes TargetAccount = 2;
  void clear_targetaccount();
  static const int kTargetAccountFieldNumber = 2;
  const ::std::string& targetaccount() const;
  void set_targetaccount(const ::std::string& value);
  #if LANG_CXX11
  void set_targetaccount(::std::string&& value);
  #endif
  void set_targetaccount(const char* value);
  void set_targetaccount(const void* value, size_t size);
  ::std::string* mutable_targetaccount();
  ::std::string* release_targetaccount();
  void set_allocated_targetaccount(::std::string* targetaccount);

  // bytes FromAccount = 3;
  void clear_fromaccount();
  static const int kFromAccountFieldNumber = 3;
  const ::std::string& fromaccount() const;
  void set_fromaccount(const ::std::string& value);
  #if LANG_CXX11
  void set_fromaccount(::std::string&& value);
  #endif
  void set_fromaccount(const char* value);
  void set_fromaccount(const void* value, size_t size);
  ::std::string* mutable_fromaccount();
  ::std::string* release_fromaccount();
  void set_allocated_fromaccount(::std::string* fromaccount);

  // bytes reason = 4;
  void clear_reason();
  static const int kReasonFieldNumber = 4;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const void* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .AddInformation.TargetType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::AddInformation_TargetType type() const;
  void set_type(::AddInformation_TargetType value);

  // bool isConsent = 5;
  void clear_isconsent();
  static const int kIsConsentFieldNumber = 5;
  bool isconsent() const;
  void set_isconsent(bool value);

  // @@protoc_insertion_point(class_scope:AddInformation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr targetaccount_;
  ::google::protobuf::internal::ArenaStringPtr fromaccount_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int type_;
  bool isconsent_;
  mutable int _cached_size_;
  friend struct ::protobuf_NetProtocConfig_2eproto::TableStruct;
  friend void ::protobuf_NetProtocConfig_2eproto::InitDefaultsAddInformationImpl();
};
// -------------------------------------------------------------------

class User_loginUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.loginUser) */ {
 public:
  User_loginUser();
  virtual ~User_loginUser();

  User_loginUser(const User_loginUser& from);

  inline User_loginUser& operator=(const User_loginUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User_loginUser(User_loginUser&& from) noexcept
    : User_loginUser() {
    *this = ::std::move(from);
  }

  inline User_loginUser& operator=(User_loginUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User_loginUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User_loginUser* internal_default_instance() {
    return reinterpret_cast<const User_loginUser*>(
               &_User_loginUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(User_loginUser* other);
  friend void swap(User_loginUser& a, User_loginUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User_loginUser* New() const PROTOBUF_FINAL { return New(NULL); }

  User_loginUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const User_loginUser& from);
  void MergeFrom(const User_loginUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(User_loginUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes userNumder = 1;
  void clear_usernumder();
  static const int kUserNumderFieldNumber = 1;
  const ::std::string& usernumder() const;
  void set_usernumder(const ::std::string& value);
  #if LANG_CXX11
  void set_usernumder(::std::string&& value);
  #endif
  void set_usernumder(const char* value);
  void set_usernumder(const void* value, size_t size);
  ::std::string* mutable_usernumder();
  ::std::string* release_usernumder();
  void set_allocated_usernumder(::std::string* usernumder);

  // bool isCurrent = 2;
  void clear_iscurrent();
  static const int kIsCurrentFieldNumber = 2;
  bool iscurrent() const;
  void set_iscurrent(bool value);

  // @@protoc_insertion_point(class_scope:User.loginUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr usernumder_;
  bool iscurrent_;
  mutable int _cached_size_;
  friend struct ::protobuf_NetProtocConfig_2eproto::TableStruct;
  friend void ::protobuf_NetProtocConfig_2eproto::InitDefaultsUser_loginUserImpl();
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const PROTOBUF_FINAL { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef User_loginUser loginUser;

  // accessors -------------------------------------------------------

  // repeated .User.loginUser login = 3;
  int login_size() const;
  void clear_login();
  static const int kLoginFieldNumber = 3;
  const ::User_loginUser& login(int index) const;
  ::User_loginUser* mutable_login(int index);
  ::User_loginUser* add_login();
  ::google::protobuf::RepeatedPtrField< ::User_loginUser >*
      mutable_login();
  const ::google::protobuf::RepeatedPtrField< ::User_loginUser >&
      login() const;

  // @@protoc_insertion_point(class_scope:User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::User_loginUser > login_;
  mutable int _cached_size_;
  friend struct ::protobuf_NetProtocConfig_2eproto::TableStruct;
  friend void ::protobuf_NetProtocConfig_2eproto::InitDefaultsUserImpl();
};
// -------------------------------------------------------------------

class ChatRecord_Group_HeadInfor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatRecord_Group.HeadInfor) */ {
 public:
  ChatRecord_Group_HeadInfor();
  virtual ~ChatRecord_Group_HeadInfor();

  ChatRecord_Group_HeadInfor(const ChatRecord_Group_HeadInfor& from);

  inline ChatRecord_Group_HeadInfor& operator=(const ChatRecord_Group_HeadInfor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatRecord_Group_HeadInfor(ChatRecord_Group_HeadInfor&& from) noexcept
    : ChatRecord_Group_HeadInfor() {
    *this = ::std::move(from);
  }

  inline ChatRecord_Group_HeadInfor& operator=(ChatRecord_Group_HeadInfor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRecord_Group_HeadInfor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatRecord_Group_HeadInfor* internal_default_instance() {
    return reinterpret_cast<const ChatRecord_Group_HeadInfor*>(
               &_ChatRecord_Group_HeadInfor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ChatRecord_Group_HeadInfor* other);
  friend void swap(ChatRecord_Group_HeadInfor& a, ChatRecord_Group_HeadInfor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatRecord_Group_HeadInfor* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatRecord_Group_HeadInfor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatRecord_Group_HeadInfor& from);
  void MergeFrom(const ChatRecord_Group_HeadInfor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatRecord_Group_HeadInfor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 FileSize = 1;
  void clear_filesize();
  static const int kFileSizeFieldNumber = 1;
  ::google::protobuf::uint64 filesize() const;
  void set_filesize(::google::protobuf::uint64 value);

  // bool isConsent = 3;
  void clear_isconsent();
  static const int kIsConsentFieldNumber = 3;
  bool isconsent() const;
  void set_isconsent(bool value);

  // @@protoc_insertion_point(class_scope:ChatRecord_Group.HeadInfor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 filesize_;
  bool isconsent_;
  mutable int _cached_size_;
  friend struct ::protobuf_NetProtocConfig_2eproto::TableStruct;
  friend void ::protobuf_NetProtocConfig_2eproto::InitDefaultsChatRecord_Group_HeadInforImpl();
};
// -------------------------------------------------------------------

class ChatRecord_Group : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatRecord_Group) */ {
 public:
  ChatRecord_Group();
  virtual ~ChatRecord_Group();

  ChatRecord_Group(const ChatRecord_Group& from);

  inline ChatRecord_Group& operator=(const ChatRecord_Group& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatRecord_Group(ChatRecord_Group&& from) noexcept
    : ChatRecord_Group() {
    *this = ::std::move(from);
  }

  inline ChatRecord_Group& operator=(ChatRecord_Group&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRecord_Group& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatRecord_Group* internal_default_instance() {
    return reinterpret_cast<const ChatRecord_Group*>(
               &_ChatRecord_Group_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ChatRecord_Group* other);
  friend void swap(ChatRecord_Group& a, ChatRecord_Group& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatRecord_Group* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatRecord_Group* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatRecord_Group& from);
  void MergeFrom(const ChatRecord_Group& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatRecord_Group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChatRecord_Group_HeadInfor HeadInfor;

  typedef ChatRecord_Group_contenttype contenttype;
  static const contenttype file =
    ChatRecord_Group_contenttype_file;
  static const contenttype image =
    ChatRecord_Group_contenttype_image;
  static const contenttype text =
    ChatRecord_Group_contenttype_text;
  static const contenttype folder =
    ChatRecord_Group_contenttype_folder;
  static const contenttype audio =
    ChatRecord_Group_contenttype_audio;
  static inline bool contenttype_IsValid(int value) {
    return ChatRecord_Group_contenttype_IsValid(value);
  }
  static const contenttype contenttype_MIN =
    ChatRecord_Group_contenttype_contenttype_MIN;
  static const contenttype contenttype_MAX =
    ChatRecord_Group_contenttype_contenttype_MAX;
  static const int contenttype_ARRAYSIZE =
    ChatRecord_Group_contenttype_contenttype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  contenttype_descriptor() {
    return ChatRecord_Group_contenttype_descriptor();
  }
  static inline const ::std::string& contenttype_Name(contenttype value) {
    return ChatRecord_Group_contenttype_Name(value);
  }
  static inline bool contenttype_Parse(const ::std::string& name,
      contenttype* value) {
    return ChatRecord_Group_contenttype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // bytes content = 4;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // bytes selfNumber = 5;
  void clear_selfnumber();
  static const int kSelfNumberFieldNumber = 5;
  const ::std::string& selfnumber() const;
  void set_selfnumber(const ::std::string& value);
  #if LANG_CXX11
  void set_selfnumber(::std::string&& value);
  #endif
  void set_selfnumber(const char* value);
  void set_selfnumber(const void* value, size_t size);
  ::std::string* mutable_selfnumber();
  ::std::string* release_selfnumber();
  void set_allocated_selfnumber(::std::string* selfnumber);

  // .ChatRecord_Group.HeadInfor head = 6;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 6;
  const ::ChatRecord_Group_HeadInfor& head() const;
  ::ChatRecord_Group_HeadInfor* release_head();
  ::ChatRecord_Group_HeadInfor* mutable_head();
  void set_allocated_head(::ChatRecord_Group_HeadInfor* head);

  // uint64 currtime = 1;
  void clear_currtime();
  static const int kCurrtimeFieldNumber = 1;
  ::google::protobuf::uint64 currtime() const;
  void set_currtime(::google::protobuf::uint64 value);

  // .ChatRecord_Group.contenttype type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::ChatRecord_Group_contenttype type() const;
  void set_type(::ChatRecord_Group_contenttype value);

  // @@protoc_insertion_point(class_scope:ChatRecord_Group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr selfnumber_;
  ::ChatRecord_Group_HeadInfor* head_;
  ::google::protobuf::uint64 currtime_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_NetProtocConfig_2eproto::TableStruct;
  friend void ::protobuf_NetProtocConfig_2eproto::InitDefaultsChatRecord_GroupImpl();
};
// -------------------------------------------------------------------

class StateInformation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StateInformation) */ {
 public:
  StateInformation();
  virtual ~StateInformation();

  StateInformation(const StateInformation& from);

  inline StateInformation& operator=(const StateInformation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateInformation(StateInformation&& from) noexcept
    : StateInformation() {
    *this = ::std::move(from);
  }

  inline StateInformation& operator=(StateInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StateInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateInformation* internal_default_instance() {
    return reinterpret_cast<const StateInformation*>(
               &_StateInformation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(StateInformation* other);
  friend void swap(StateInformation& a, StateInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateInformation* New() const PROTOBUF_FINAL { return New(NULL); }

  StateInformation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StateInformation& from);
  void MergeFrom(const StateInformation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StateInformation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef StateInformation_StateMsg StateMsg;
  static const StateMsg Online =
    StateInformation_StateMsg_Online;
  static const StateMsg offline =
    StateInformation_StateMsg_offline;
  static const StateMsg hide =
    StateInformation_StateMsg_hide;
  static const StateMsg dontexcuse =
    StateInformation_StateMsg_dontexcuse;
  static inline bool StateMsg_IsValid(int value) {
    return StateInformation_StateMsg_IsValid(value);
  }
  static const StateMsg StateMsg_MIN =
    StateInformation_StateMsg_StateMsg_MIN;
  static const StateMsg StateMsg_MAX =
    StateInformation_StateMsg_StateMsg_MAX;
  static const int StateMsg_ARRAYSIZE =
    StateInformation_StateMsg_StateMsg_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StateMsg_descriptor() {
    return StateInformation_StateMsg_descriptor();
  }
  static inline const ::std::string& StateMsg_Name(StateMsg value) {
    return StateInformation_StateMsg_Name(value);
  }
  static inline bool StateMsg_Parse(const ::std::string& name,
      StateMsg* value) {
    return StateInformation_StateMsg_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated bytes AllFriend = 2;
  int allfriend_size() const;
  void clear_allfriend();
  static const int kAllFriendFieldNumber = 2;
  const ::std::string& allfriend(int index) const;
  ::std::string* mutable_allfriend(int index);
  void set_allfriend(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allfriend(int index, ::std::string&& value);
  #endif
  void set_allfriend(int index, const char* value);
  void set_allfriend(int index, const void* value, size_t size);
  ::std::string* add_allfriend();
  void add_allfriend(const ::std::string& value);
  #if LANG_CXX11
  void add_allfriend(::std::string&& value);
  #endif
  void add_allfriend(const char* value);
  void add_allfriend(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& allfriend() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_allfriend();

  // .StateInformation.StateMsg currState = 1;
  void clear_currstate();
  static const int kCurrStateFieldNumber = 1;
  ::StateInformation_StateMsg currstate() const;
  void set_currstate(::StateInformation_StateMsg value);

  // @@protoc_insertion_point(class_scope:StateInformation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> allfriend_;
  int currstate_;
  mutable int _cached_size_;
  friend struct ::protobuf_NetProtocConfig_2eproto::TableStruct;
  friend void ::protobuf_NetProtocConfig_2eproto::InitDefaultsStateInformationImpl();
};
// -------------------------------------------------------------------

class protocol : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol) */ {
 public:
  protocol();
  virtual ~protocol();

  protocol(const protocol& from);

  inline protocol& operator=(const protocol& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  protocol(protocol&& from) noexcept
    : protocol() {
    *this = ::std::move(from);
  }

  inline protocol& operator=(protocol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const protocol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const protocol* internal_default_instance() {
    return reinterpret_cast<const protocol*>(
               &_protocol_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(protocol* other);
  friend void swap(protocol& a, protocol& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline protocol* New() const PROTOBUF_FINAL { return New(NULL); }

  protocol* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const protocol& from);
  void MergeFrom(const protocol& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(protocol* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef protocol_MsgType MsgType;
  static const MsgType tcp =
    protocol_MsgType_tcp;
  static const MsgType udp =
    protocol_MsgType_udp;
  static const MsgType http =
    protocol_MsgType_http;
  static const MsgType smtp =
    protocol_MsgType_smtp;
  static const MsgType ftp =
    protocol_MsgType_ftp;
  static const MsgType stateInfor =
    protocol_MsgType_stateInfor;
  static inline bool MsgType_IsValid(int value) {
    return protocol_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    protocol_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    protocol_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    protocol_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return protocol_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return protocol_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return protocol_MsgType_Parse(name, value);
  }

  typedef protocol_Chat_OneorMultiple Chat_OneorMultiple;
  static const Chat_OneorMultiple one =
    protocol_Chat_OneorMultiple_one;
  static const Chat_OneorMultiple multiple =
    protocol_Chat_OneorMultiple_multiple;
  static inline bool Chat_OneorMultiple_IsValid(int value) {
    return protocol_Chat_OneorMultiple_IsValid(value);
  }
  static const Chat_OneorMultiple Chat_OneorMultiple_MIN =
    protocol_Chat_OneorMultiple_Chat_OneorMultiple_MIN;
  static const Chat_OneorMultiple Chat_OneorMultiple_MAX =
    protocol_Chat_OneorMultiple_Chat_OneorMultiple_MAX;
  static const int Chat_OneorMultiple_ARRAYSIZE =
    protocol_Chat_OneorMultiple_Chat_OneorMultiple_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Chat_OneorMultiple_descriptor() {
    return protocol_Chat_OneorMultiple_descriptor();
  }
  static inline const ::std::string& Chat_OneorMultiple_Name(Chat_OneorMultiple value) {
    return protocol_Chat_OneorMultiple_Name(value);
  }
  static inline bool Chat_OneorMultiple_Parse(const ::std::string& name,
      Chat_OneorMultiple* value) {
    return protocol_Chat_OneorMultiple_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ChatRecord chatContent = 4;
  int chatcontent_size() const;
  void clear_chatcontent();
  static const int kChatContentFieldNumber = 4;
  const ::ChatRecord& chatcontent(int index) const;
  ::ChatRecord* mutable_chatcontent(int index);
  ::ChatRecord* add_chatcontent();
  ::google::protobuf::RepeatedPtrField< ::ChatRecord >*
      mutable_chatcontent();
  const ::google::protobuf::RepeatedPtrField< ::ChatRecord >&
      chatcontent() const;

  // repeated .ChatRecord_Group group = 5;
  int group_size() const;
  void clear_group();
  static const int kGroupFieldNumber = 5;
  const ::ChatRecord_Group& group(int index) const;
  ::ChatRecord_Group* mutable_group(int index);
  ::ChatRecord_Group* add_group();
  ::google::protobuf::RepeatedPtrField< ::ChatRecord_Group >*
      mutable_group();
  const ::google::protobuf::RepeatedPtrField< ::ChatRecord_Group >&
      group() const;

  // bytes MySelfNum = 2;
  void clear_myselfnum();
  static const int kMySelfNumFieldNumber = 2;
  const ::std::string& myselfnum() const;
  void set_myselfnum(const ::std::string& value);
  #if LANG_CXX11
  void set_myselfnum(::std::string&& value);
  #endif
  void set_myselfnum(const char* value);
  void set_myselfnum(const void* value, size_t size);
  ::std::string* mutable_myselfnum();
  ::std::string* release_myselfnum();
  void set_allocated_myselfnum(::std::string* myselfnum);

  // .AddInformation addInfor = 6;
  bool has_addinfor() const;
  void clear_addinfor();
  static const int kAddInforFieldNumber = 6;
  const ::AddInformation& addinfor() const;
  ::AddInformation* release_addinfor();
  ::AddInformation* mutable_addinfor();
  void set_allocated_addinfor(::AddInformation* addinfor);

  // .StateInformation state = 7;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 7;
  const ::StateInformation& state() const;
  ::StateInformation* release_state();
  ::StateInformation* mutable_state();
  void set_allocated_state(::StateInformation* state);

  // .protocol.MsgType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::protocol_MsgType type() const;
  void set_type(::protocol_MsgType value);

  // .protocol.Chat_OneorMultiple count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::protocol_Chat_OneorMultiple count() const;
  void set_count(::protocol_Chat_OneorMultiple value);

  // @@protoc_insertion_point(class_scope:protocol)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ChatRecord > chatcontent_;
  ::google::protobuf::RepeatedPtrField< ::ChatRecord_Group > group_;
  ::google::protobuf::internal::ArenaStringPtr myselfnum_;
  ::AddInformation* addinfor_;
  ::StateInformation* state_;
  int type_;
  int count_;
  mutable int _cached_size_;
  friend struct ::protobuf_NetProtocConfig_2eproto::TableStruct;
  friend void ::protobuf_NetProtocConfig_2eproto::InitDefaultsprotocolImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatRecord_HeadInfor

// uint64 FileSize = 1;
inline void ChatRecord_HeadInfor::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChatRecord_HeadInfor::filesize() const {
  // @@protoc_insertion_point(field_get:ChatRecord.HeadInfor.FileSize)
  return filesize_;
}
inline void ChatRecord_HeadInfor::set_filesize(::google::protobuf::uint64 value) {
  
  filesize_ = value;
  // @@protoc_insertion_point(field_set:ChatRecord.HeadInfor.FileSize)
}

// bytes name = 2;
inline void ChatRecord_HeadInfor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatRecord_HeadInfor::name() const {
  // @@protoc_insertion_point(field_get:ChatRecord.HeadInfor.name)
  return name_.GetNoArena();
}
inline void ChatRecord_HeadInfor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatRecord.HeadInfor.name)
}
#if LANG_CXX11
inline void ChatRecord_HeadInfor::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatRecord.HeadInfor.name)
}
#endif
inline void ChatRecord_HeadInfor::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatRecord.HeadInfor.name)
}
inline void ChatRecord_HeadInfor::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatRecord.HeadInfor.name)
}
inline ::std::string* ChatRecord_HeadInfor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ChatRecord.HeadInfor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRecord_HeadInfor::release_name() {
  // @@protoc_insertion_point(field_release:ChatRecord.HeadInfor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRecord_HeadInfor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ChatRecord.HeadInfor.name)
}

// bool isConsent = 3;
inline void ChatRecord_HeadInfor::clear_isconsent() {
  isconsent_ = false;
}
inline bool ChatRecord_HeadInfor::isconsent() const {
  // @@protoc_insertion_point(field_get:ChatRecord.HeadInfor.isConsent)
  return isconsent_;
}
inline void ChatRecord_HeadInfor::set_isconsent(bool value) {
  
  isconsent_ = value;
  // @@protoc_insertion_point(field_set:ChatRecord.HeadInfor.isConsent)
}

// -------------------------------------------------------------------

// ChatRecord

// uint64 time = 1;
inline void ChatRecord::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChatRecord::time() const {
  // @@protoc_insertion_point(field_get:ChatRecord.time)
  return time_;
}
inline void ChatRecord::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:ChatRecord.time)
}

// .ChatRecord.contenttype type = 2;
inline void ChatRecord::clear_type() {
  type_ = 0;
}
inline ::ChatRecord_contenttype ChatRecord::type() const {
  // @@protoc_insertion_point(field_get:ChatRecord.type)
  return static_cast< ::ChatRecord_contenttype >(type_);
}
inline void ChatRecord::set_type(::ChatRecord_contenttype value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ChatRecord.type)
}

// bytes content = 3;
inline void ChatRecord::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatRecord::content() const {
  // @@protoc_insertion_point(field_get:ChatRecord.content)
  return content_.GetNoArena();
}
inline void ChatRecord::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatRecord.content)
}
#if LANG_CXX11
inline void ChatRecord::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatRecord.content)
}
#endif
inline void ChatRecord::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatRecord.content)
}
inline void ChatRecord::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatRecord.content)
}
inline ::std::string* ChatRecord::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:ChatRecord.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRecord::release_content() {
  // @@protoc_insertion_point(field_release:ChatRecord.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRecord::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ChatRecord.content)
}

// bool isSelf = 4;
inline void ChatRecord::clear_isself() {
  isself_ = false;
}
inline bool ChatRecord::isself() const {
  // @@protoc_insertion_point(field_get:ChatRecord.isSelf)
  return isself_;
}
inline void ChatRecord::set_isself(bool value) {
  
  isself_ = value;
  // @@protoc_insertion_point(field_set:ChatRecord.isSelf)
}

// bytes targetNumber = 5;
inline void ChatRecord::clear_targetnumber() {
  targetnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatRecord::targetnumber() const {
  // @@protoc_insertion_point(field_get:ChatRecord.targetNumber)
  return targetnumber_.GetNoArena();
}
inline void ChatRecord::set_targetnumber(const ::std::string& value) {
  
  targetnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatRecord.targetNumber)
}
#if LANG_CXX11
inline void ChatRecord::set_targetnumber(::std::string&& value) {
  
  targetnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatRecord.targetNumber)
}
#endif
inline void ChatRecord::set_targetnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  targetnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatRecord.targetNumber)
}
inline void ChatRecord::set_targetnumber(const void* value, size_t size) {
  
  targetnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatRecord.targetNumber)
}
inline ::std::string* ChatRecord::mutable_targetnumber() {
  
  // @@protoc_insertion_point(field_mutable:ChatRecord.targetNumber)
  return targetnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRecord::release_targetnumber() {
  // @@protoc_insertion_point(field_release:ChatRecord.targetNumber)
  
  return targetnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRecord::set_allocated_targetnumber(::std::string* targetnumber) {
  if (targetnumber != NULL) {
    
  } else {
    
  }
  targetnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetnumber);
  // @@protoc_insertion_point(field_set_allocated:ChatRecord.targetNumber)
}

// bytes selfNumber = 6;
inline void ChatRecord::clear_selfnumber() {
  selfnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatRecord::selfnumber() const {
  // @@protoc_insertion_point(field_get:ChatRecord.selfNumber)
  return selfnumber_.GetNoArena();
}
inline void ChatRecord::set_selfnumber(const ::std::string& value) {
  
  selfnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatRecord.selfNumber)
}
#if LANG_CXX11
inline void ChatRecord::set_selfnumber(::std::string&& value) {
  
  selfnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatRecord.selfNumber)
}
#endif
inline void ChatRecord::set_selfnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  selfnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatRecord.selfNumber)
}
inline void ChatRecord::set_selfnumber(const void* value, size_t size) {
  
  selfnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatRecord.selfNumber)
}
inline ::std::string* ChatRecord::mutable_selfnumber() {
  
  // @@protoc_insertion_point(field_mutable:ChatRecord.selfNumber)
  return selfnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRecord::release_selfnumber() {
  // @@protoc_insertion_point(field_release:ChatRecord.selfNumber)
  
  return selfnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRecord::set_allocated_selfnumber(::std::string* selfnumber) {
  if (selfnumber != NULL) {
    
  } else {
    
  }
  selfnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selfnumber);
  // @@protoc_insertion_point(field_set_allocated:ChatRecord.selfNumber)
}

// .ChatRecord.HeadInfor head = 7;
inline bool ChatRecord::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void ChatRecord::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::ChatRecord_HeadInfor& ChatRecord::head() const {
  const ::ChatRecord_HeadInfor* p = head_;
  // @@protoc_insertion_point(field_get:ChatRecord.head)
  return p != NULL ? *p : *reinterpret_cast<const ::ChatRecord_HeadInfor*>(
      &::_ChatRecord_HeadInfor_default_instance_);
}
inline ::ChatRecord_HeadInfor* ChatRecord::release_head() {
  // @@protoc_insertion_point(field_release:ChatRecord.head)
  
  ::ChatRecord_HeadInfor* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::ChatRecord_HeadInfor* ChatRecord::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ChatRecord_HeadInfor;
  }
  // @@protoc_insertion_point(field_mutable:ChatRecord.head)
  return head_;
}
inline void ChatRecord::set_allocated_head(::ChatRecord_HeadInfor* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ChatRecord.head)
}

// -------------------------------------------------------------------

// AddInformation

// .AddInformation.TargetType type = 1;
inline void AddInformation::clear_type() {
  type_ = 0;
}
inline ::AddInformation_TargetType AddInformation::type() const {
  // @@protoc_insertion_point(field_get:AddInformation.type)
  return static_cast< ::AddInformation_TargetType >(type_);
}
inline void AddInformation::set_type(::AddInformation_TargetType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AddInformation.type)
}

// bytes TargetAccount = 2;
inline void AddInformation::clear_targetaccount() {
  targetaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddInformation::targetaccount() const {
  // @@protoc_insertion_point(field_get:AddInformation.TargetAccount)
  return targetaccount_.GetNoArena();
}
inline void AddInformation::set_targetaccount(const ::std::string& value) {
  
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddInformation.TargetAccount)
}
#if LANG_CXX11
inline void AddInformation::set_targetaccount(::std::string&& value) {
  
  targetaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddInformation.TargetAccount)
}
#endif
inline void AddInformation::set_targetaccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddInformation.TargetAccount)
}
inline void AddInformation::set_targetaccount(const void* value, size_t size) {
  
  targetaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddInformation.TargetAccount)
}
inline ::std::string* AddInformation::mutable_targetaccount() {
  
  // @@protoc_insertion_point(field_mutable:AddInformation.TargetAccount)
  return targetaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddInformation::release_targetaccount() {
  // @@protoc_insertion_point(field_release:AddInformation.TargetAccount)
  
  return targetaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddInformation::set_allocated_targetaccount(::std::string* targetaccount) {
  if (targetaccount != NULL) {
    
  } else {
    
  }
  targetaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetaccount);
  // @@protoc_insertion_point(field_set_allocated:AddInformation.TargetAccount)
}

// bytes FromAccount = 3;
inline void AddInformation::clear_fromaccount() {
  fromaccount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddInformation::fromaccount() const {
  // @@protoc_insertion_point(field_get:AddInformation.FromAccount)
  return fromaccount_.GetNoArena();
}
inline void AddInformation::set_fromaccount(const ::std::string& value) {
  
  fromaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddInformation.FromAccount)
}
#if LANG_CXX11
inline void AddInformation::set_fromaccount(::std::string&& value) {
  
  fromaccount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddInformation.FromAccount)
}
#endif
inline void AddInformation::set_fromaccount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fromaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddInformation.FromAccount)
}
inline void AddInformation::set_fromaccount(const void* value, size_t size) {
  
  fromaccount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddInformation.FromAccount)
}
inline ::std::string* AddInformation::mutable_fromaccount() {
  
  // @@protoc_insertion_point(field_mutable:AddInformation.FromAccount)
  return fromaccount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddInformation::release_fromaccount() {
  // @@protoc_insertion_point(field_release:AddInformation.FromAccount)
  
  return fromaccount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddInformation::set_allocated_fromaccount(::std::string* fromaccount) {
  if (fromaccount != NULL) {
    
  } else {
    
  }
  fromaccount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromaccount);
  // @@protoc_insertion_point(field_set_allocated:AddInformation.FromAccount)
}

// bytes reason = 4;
inline void AddInformation::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddInformation::reason() const {
  // @@protoc_insertion_point(field_get:AddInformation.reason)
  return reason_.GetNoArena();
}
inline void AddInformation::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddInformation.reason)
}
#if LANG_CXX11
inline void AddInformation::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddInformation.reason)
}
#endif
inline void AddInformation::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddInformation.reason)
}
inline void AddInformation::set_reason(const void* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddInformation.reason)
}
inline ::std::string* AddInformation::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:AddInformation.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddInformation::release_reason() {
  // @@protoc_insertion_point(field_release:AddInformation.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddInformation::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:AddInformation.reason)
}

// bool isConsent = 5;
inline void AddInformation::clear_isconsent() {
  isconsent_ = false;
}
inline bool AddInformation::isconsent() const {
  // @@protoc_insertion_point(field_get:AddInformation.isConsent)
  return isconsent_;
}
inline void AddInformation::set_isconsent(bool value) {
  
  isconsent_ = value;
  // @@protoc_insertion_point(field_set:AddInformation.isConsent)
}

// -------------------------------------------------------------------

// User_loginUser

// bytes userNumder = 1;
inline void User_loginUser::clear_usernumder() {
  usernumder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User_loginUser::usernumder() const {
  // @@protoc_insertion_point(field_get:User.loginUser.userNumder)
  return usernumder_.GetNoArena();
}
inline void User_loginUser::set_usernumder(const ::std::string& value) {
  
  usernumder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.loginUser.userNumder)
}
#if LANG_CXX11
inline void User_loginUser::set_usernumder(::std::string&& value) {
  
  usernumder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.loginUser.userNumder)
}
#endif
inline void User_loginUser::set_usernumder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usernumder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.loginUser.userNumder)
}
inline void User_loginUser::set_usernumder(const void* value, size_t size) {
  
  usernumder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.loginUser.userNumder)
}
inline ::std::string* User_loginUser::mutable_usernumder() {
  
  // @@protoc_insertion_point(field_mutable:User.loginUser.userNumder)
  return usernumder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User_loginUser::release_usernumder() {
  // @@protoc_insertion_point(field_release:User.loginUser.userNumder)
  
  return usernumder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User_loginUser::set_allocated_usernumder(::std::string* usernumder) {
  if (usernumder != NULL) {
    
  } else {
    
  }
  usernumder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usernumder);
  // @@protoc_insertion_point(field_set_allocated:User.loginUser.userNumder)
}

// bool isCurrent = 2;
inline void User_loginUser::clear_iscurrent() {
  iscurrent_ = false;
}
inline bool User_loginUser::iscurrent() const {
  // @@protoc_insertion_point(field_get:User.loginUser.isCurrent)
  return iscurrent_;
}
inline void User_loginUser::set_iscurrent(bool value) {
  
  iscurrent_ = value;
  // @@protoc_insertion_point(field_set:User.loginUser.isCurrent)
}

// -------------------------------------------------------------------

// User

// repeated .User.loginUser login = 3;
inline int User::login_size() const {
  return login_.size();
}
inline void User::clear_login() {
  login_.Clear();
}
inline const ::User_loginUser& User::login(int index) const {
  // @@protoc_insertion_point(field_get:User.login)
  return login_.Get(index);
}
inline ::User_loginUser* User::mutable_login(int index) {
  // @@protoc_insertion_point(field_mutable:User.login)
  return login_.Mutable(index);
}
inline ::User_loginUser* User::add_login() {
  // @@protoc_insertion_point(field_add:User.login)
  return login_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::User_loginUser >*
User::mutable_login() {
  // @@protoc_insertion_point(field_mutable_list:User.login)
  return &login_;
}
inline const ::google::protobuf::RepeatedPtrField< ::User_loginUser >&
User::login() const {
  // @@protoc_insertion_point(field_list:User.login)
  return login_;
}

// -------------------------------------------------------------------

// ChatRecord_Group_HeadInfor

// uint64 FileSize = 1;
inline void ChatRecord_Group_HeadInfor::clear_filesize() {
  filesize_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChatRecord_Group_HeadInfor::filesize() const {
  // @@protoc_insertion_point(field_get:ChatRecord_Group.HeadInfor.FileSize)
  return filesize_;
}
inline void ChatRecord_Group_HeadInfor::set_filesize(::google::protobuf::uint64 value) {
  
  filesize_ = value;
  // @@protoc_insertion_point(field_set:ChatRecord_Group.HeadInfor.FileSize)
}

// bytes name = 2;
inline void ChatRecord_Group_HeadInfor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatRecord_Group_HeadInfor::name() const {
  // @@protoc_insertion_point(field_get:ChatRecord_Group.HeadInfor.name)
  return name_.GetNoArena();
}
inline void ChatRecord_Group_HeadInfor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatRecord_Group.HeadInfor.name)
}
#if LANG_CXX11
inline void ChatRecord_Group_HeadInfor::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatRecord_Group.HeadInfor.name)
}
#endif
inline void ChatRecord_Group_HeadInfor::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatRecord_Group.HeadInfor.name)
}
inline void ChatRecord_Group_HeadInfor::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatRecord_Group.HeadInfor.name)
}
inline ::std::string* ChatRecord_Group_HeadInfor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ChatRecord_Group.HeadInfor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRecord_Group_HeadInfor::release_name() {
  // @@protoc_insertion_point(field_release:ChatRecord_Group.HeadInfor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRecord_Group_HeadInfor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ChatRecord_Group.HeadInfor.name)
}

// bool isConsent = 3;
inline void ChatRecord_Group_HeadInfor::clear_isconsent() {
  isconsent_ = false;
}
inline bool ChatRecord_Group_HeadInfor::isconsent() const {
  // @@protoc_insertion_point(field_get:ChatRecord_Group.HeadInfor.isConsent)
  return isconsent_;
}
inline void ChatRecord_Group_HeadInfor::set_isconsent(bool value) {
  
  isconsent_ = value;
  // @@protoc_insertion_point(field_set:ChatRecord_Group.HeadInfor.isConsent)
}

// -------------------------------------------------------------------

// ChatRecord_Group

// uint64 currtime = 1;
inline void ChatRecord_Group::clear_currtime() {
  currtime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ChatRecord_Group::currtime() const {
  // @@protoc_insertion_point(field_get:ChatRecord_Group.currtime)
  return currtime_;
}
inline void ChatRecord_Group::set_currtime(::google::protobuf::uint64 value) {
  
  currtime_ = value;
  // @@protoc_insertion_point(field_set:ChatRecord_Group.currtime)
}

// bytes account = 2;
inline void ChatRecord_Group::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatRecord_Group::account() const {
  // @@protoc_insertion_point(field_get:ChatRecord_Group.account)
  return account_.GetNoArena();
}
inline void ChatRecord_Group::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatRecord_Group.account)
}
#if LANG_CXX11
inline void ChatRecord_Group::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatRecord_Group.account)
}
#endif
inline void ChatRecord_Group::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatRecord_Group.account)
}
inline void ChatRecord_Group::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatRecord_Group.account)
}
inline ::std::string* ChatRecord_Group::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:ChatRecord_Group.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRecord_Group::release_account() {
  // @@protoc_insertion_point(field_release:ChatRecord_Group.account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRecord_Group::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:ChatRecord_Group.account)
}

// .ChatRecord_Group.contenttype type = 3;
inline void ChatRecord_Group::clear_type() {
  type_ = 0;
}
inline ::ChatRecord_Group_contenttype ChatRecord_Group::type() const {
  // @@protoc_insertion_point(field_get:ChatRecord_Group.type)
  return static_cast< ::ChatRecord_Group_contenttype >(type_);
}
inline void ChatRecord_Group::set_type(::ChatRecord_Group_contenttype value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ChatRecord_Group.type)
}

// bytes content = 4;
inline void ChatRecord_Group::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatRecord_Group::content() const {
  // @@protoc_insertion_point(field_get:ChatRecord_Group.content)
  return content_.GetNoArena();
}
inline void ChatRecord_Group::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatRecord_Group.content)
}
#if LANG_CXX11
inline void ChatRecord_Group::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatRecord_Group.content)
}
#endif
inline void ChatRecord_Group::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatRecord_Group.content)
}
inline void ChatRecord_Group::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatRecord_Group.content)
}
inline ::std::string* ChatRecord_Group::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:ChatRecord_Group.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRecord_Group::release_content() {
  // @@protoc_insertion_point(field_release:ChatRecord_Group.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRecord_Group::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ChatRecord_Group.content)
}

// bytes selfNumber = 5;
inline void ChatRecord_Group::clear_selfnumber() {
  selfnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatRecord_Group::selfnumber() const {
  // @@protoc_insertion_point(field_get:ChatRecord_Group.selfNumber)
  return selfnumber_.GetNoArena();
}
inline void ChatRecord_Group::set_selfnumber(const ::std::string& value) {
  
  selfnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatRecord_Group.selfNumber)
}
#if LANG_CXX11
inline void ChatRecord_Group::set_selfnumber(::std::string&& value) {
  
  selfnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChatRecord_Group.selfNumber)
}
#endif
inline void ChatRecord_Group::set_selfnumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  selfnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatRecord_Group.selfNumber)
}
inline void ChatRecord_Group::set_selfnumber(const void* value, size_t size) {
  
  selfnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatRecord_Group.selfNumber)
}
inline ::std::string* ChatRecord_Group::mutable_selfnumber() {
  
  // @@protoc_insertion_point(field_mutable:ChatRecord_Group.selfNumber)
  return selfnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatRecord_Group::release_selfnumber() {
  // @@protoc_insertion_point(field_release:ChatRecord_Group.selfNumber)
  
  return selfnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatRecord_Group::set_allocated_selfnumber(::std::string* selfnumber) {
  if (selfnumber != NULL) {
    
  } else {
    
  }
  selfnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selfnumber);
  // @@protoc_insertion_point(field_set_allocated:ChatRecord_Group.selfNumber)
}

// .ChatRecord_Group.HeadInfor head = 6;
inline bool ChatRecord_Group::has_head() const {
  return this != internal_default_instance() && head_ != NULL;
}
inline void ChatRecord_Group::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) {
    delete head_;
  }
  head_ = NULL;
}
inline const ::ChatRecord_Group_HeadInfor& ChatRecord_Group::head() const {
  const ::ChatRecord_Group_HeadInfor* p = head_;
  // @@protoc_insertion_point(field_get:ChatRecord_Group.head)
  return p != NULL ? *p : *reinterpret_cast<const ::ChatRecord_Group_HeadInfor*>(
      &::_ChatRecord_Group_HeadInfor_default_instance_);
}
inline ::ChatRecord_Group_HeadInfor* ChatRecord_Group::release_head() {
  // @@protoc_insertion_point(field_release:ChatRecord_Group.head)
  
  ::ChatRecord_Group_HeadInfor* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::ChatRecord_Group_HeadInfor* ChatRecord_Group::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ChatRecord_Group_HeadInfor;
  }
  // @@protoc_insertion_point(field_mutable:ChatRecord_Group.head)
  return head_;
}
inline void ChatRecord_Group::set_allocated_head(::ChatRecord_Group_HeadInfor* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    
  } else {
    
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:ChatRecord_Group.head)
}

// -------------------------------------------------------------------

// StateInformation

// .StateInformation.StateMsg currState = 1;
inline void StateInformation::clear_currstate() {
  currstate_ = 0;
}
inline ::StateInformation_StateMsg StateInformation::currstate() const {
  // @@protoc_insertion_point(field_get:StateInformation.currState)
  return static_cast< ::StateInformation_StateMsg >(currstate_);
}
inline void StateInformation::set_currstate(::StateInformation_StateMsg value) {
  
  currstate_ = value;
  // @@protoc_insertion_point(field_set:StateInformation.currState)
}

// repeated bytes AllFriend = 2;
inline int StateInformation::allfriend_size() const {
  return allfriend_.size();
}
inline void StateInformation::clear_allfriend() {
  allfriend_.Clear();
}
inline const ::std::string& StateInformation::allfriend(int index) const {
  // @@protoc_insertion_point(field_get:StateInformation.AllFriend)
  return allfriend_.Get(index);
}
inline ::std::string* StateInformation::mutable_allfriend(int index) {
  // @@protoc_insertion_point(field_mutable:StateInformation.AllFriend)
  return allfriend_.Mutable(index);
}
inline void StateInformation::set_allfriend(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:StateInformation.AllFriend)
  allfriend_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StateInformation::set_allfriend(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:StateInformation.AllFriend)
  allfriend_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StateInformation::set_allfriend(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allfriend_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StateInformation.AllFriend)
}
inline void StateInformation::set_allfriend(int index, const void* value, size_t size) {
  allfriend_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StateInformation.AllFriend)
}
inline ::std::string* StateInformation::add_allfriend() {
  // @@protoc_insertion_point(field_add_mutable:StateInformation.AllFriend)
  return allfriend_.Add();
}
inline void StateInformation::add_allfriend(const ::std::string& value) {
  allfriend_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StateInformation.AllFriend)
}
#if LANG_CXX11
inline void StateInformation::add_allfriend(::std::string&& value) {
  allfriend_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StateInformation.AllFriend)
}
#endif
inline void StateInformation::add_allfriend(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  allfriend_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StateInformation.AllFriend)
}
inline void StateInformation::add_allfriend(const void* value, size_t size) {
  allfriend_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StateInformation.AllFriend)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StateInformation::allfriend() const {
  // @@protoc_insertion_point(field_list:StateInformation.AllFriend)
  return allfriend_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StateInformation::mutable_allfriend() {
  // @@protoc_insertion_point(field_mutable_list:StateInformation.AllFriend)
  return &allfriend_;
}

// -------------------------------------------------------------------

// protocol

// .protocol.MsgType type = 1;
inline void protocol::clear_type() {
  type_ = 0;
}
inline ::protocol_MsgType protocol::type() const {
  // @@protoc_insertion_point(field_get:protocol.type)
  return static_cast< ::protocol_MsgType >(type_);
}
inline void protocol::set_type(::protocol_MsgType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.type)
}

// bytes MySelfNum = 2;
inline void protocol::clear_myselfnum() {
  myselfnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& protocol::myselfnum() const {
  // @@protoc_insertion_point(field_get:protocol.MySelfNum)
  return myselfnum_.GetNoArena();
}
inline void protocol::set_myselfnum(const ::std::string& value) {
  
  myselfnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MySelfNum)
}
#if LANG_CXX11
inline void protocol::set_myselfnum(::std::string&& value) {
  
  myselfnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.MySelfNum)
}
#endif
inline void protocol::set_myselfnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  myselfnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MySelfNum)
}
inline void protocol::set_myselfnum(const void* value, size_t size) {
  
  myselfnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MySelfNum)
}
inline ::std::string* protocol::mutable_myselfnum() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MySelfNum)
  return myselfnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* protocol::release_myselfnum() {
  // @@protoc_insertion_point(field_release:protocol.MySelfNum)
  
  return myselfnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void protocol::set_allocated_myselfnum(::std::string* myselfnum) {
  if (myselfnum != NULL) {
    
  } else {
    
  }
  myselfnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), myselfnum);
  // @@protoc_insertion_point(field_set_allocated:protocol.MySelfNum)
}

// .protocol.Chat_OneorMultiple count = 3;
inline void protocol::clear_count() {
  count_ = 0;
}
inline ::protocol_Chat_OneorMultiple protocol::count() const {
  // @@protoc_insertion_point(field_get:protocol.count)
  return static_cast< ::protocol_Chat_OneorMultiple >(count_);
}
inline void protocol::set_count(::protocol_Chat_OneorMultiple value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:protocol.count)
}

// repeated .ChatRecord chatContent = 4;
inline int protocol::chatcontent_size() const {
  return chatcontent_.size();
}
inline void protocol::clear_chatcontent() {
  chatcontent_.Clear();
}
inline const ::ChatRecord& protocol::chatcontent(int index) const {
  // @@protoc_insertion_point(field_get:protocol.chatContent)
  return chatcontent_.Get(index);
}
inline ::ChatRecord* protocol::mutable_chatcontent(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.chatContent)
  return chatcontent_.Mutable(index);
}
inline ::ChatRecord* protocol::add_chatcontent() {
  // @@protoc_insertion_point(field_add:protocol.chatContent)
  return chatcontent_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ChatRecord >*
protocol::mutable_chatcontent() {
  // @@protoc_insertion_point(field_mutable_list:protocol.chatContent)
  return &chatcontent_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ChatRecord >&
protocol::chatcontent() const {
  // @@protoc_insertion_point(field_list:protocol.chatContent)
  return chatcontent_;
}

// repeated .ChatRecord_Group group = 5;
inline int protocol::group_size() const {
  return group_.size();
}
inline void protocol::clear_group() {
  group_.Clear();
}
inline const ::ChatRecord_Group& protocol::group(int index) const {
  // @@protoc_insertion_point(field_get:protocol.group)
  return group_.Get(index);
}
inline ::ChatRecord_Group* protocol::mutable_group(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.group)
  return group_.Mutable(index);
}
inline ::ChatRecord_Group* protocol::add_group() {
  // @@protoc_insertion_point(field_add:protocol.group)
  return group_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ChatRecord_Group >*
protocol::mutable_group() {
  // @@protoc_insertion_point(field_mutable_list:protocol.group)
  return &group_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ChatRecord_Group >&
protocol::group() const {
  // @@protoc_insertion_point(field_list:protocol.group)
  return group_;
}

// .AddInformation addInfor = 6;
inline bool protocol::has_addinfor() const {
  return this != internal_default_instance() && addinfor_ != NULL;
}
inline void protocol::clear_addinfor() {
  if (GetArenaNoVirtual() == NULL && addinfor_ != NULL) {
    delete addinfor_;
  }
  addinfor_ = NULL;
}
inline const ::AddInformation& protocol::addinfor() const {
  const ::AddInformation* p = addinfor_;
  // @@protoc_insertion_point(field_get:protocol.addInfor)
  return p != NULL ? *p : *reinterpret_cast<const ::AddInformation*>(
      &::_AddInformation_default_instance_);
}
inline ::AddInformation* protocol::release_addinfor() {
  // @@protoc_insertion_point(field_release:protocol.addInfor)
  
  ::AddInformation* temp = addinfor_;
  addinfor_ = NULL;
  return temp;
}
inline ::AddInformation* protocol::mutable_addinfor() {
  
  if (addinfor_ == NULL) {
    addinfor_ = new ::AddInformation;
  }
  // @@protoc_insertion_point(field_mutable:protocol.addInfor)
  return addinfor_;
}
inline void protocol::set_allocated_addinfor(::AddInformation* addinfor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete addinfor_;
  }
  if (addinfor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      addinfor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, addinfor, submessage_arena);
    }
    
  } else {
    
  }
  addinfor_ = addinfor;
  // @@protoc_insertion_point(field_set_allocated:protocol.addInfor)
}

// .StateInformation state = 7;
inline bool protocol::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void protocol::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::StateInformation& protocol::state() const {
  const ::StateInformation* p = state_;
  // @@protoc_insertion_point(field_get:protocol.state)
  return p != NULL ? *p : *reinterpret_cast<const ::StateInformation*>(
      &::_StateInformation_default_instance_);
}
inline ::StateInformation* protocol::release_state() {
  // @@protoc_insertion_point(field_release:protocol.state)
  
  ::StateInformation* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::StateInformation* protocol::mutable_state() {
  
  if (state_ == NULL) {
    state_ = new ::StateInformation;
  }
  // @@protoc_insertion_point(field_mutable:protocol.state)
  return state_;
}
inline void protocol::set_allocated_state(::StateInformation* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:protocol.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ChatRecord_contenttype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatRecord_contenttype>() {
  return ::ChatRecord_contenttype_descriptor();
}
template <> struct is_proto_enum< ::AddInformation_TargetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AddInformation_TargetType>() {
  return ::AddInformation_TargetType_descriptor();
}
template <> struct is_proto_enum< ::ChatRecord_Group_contenttype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatRecord_Group_contenttype>() {
  return ::ChatRecord_Group_contenttype_descriptor();
}
template <> struct is_proto_enum< ::StateInformation_StateMsg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StateInformation_StateMsg>() {
  return ::StateInformation_StateMsg_descriptor();
}
template <> struct is_proto_enum< ::protocol_MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol_MsgType>() {
  return ::protocol_MsgType_descriptor();
}
template <> struct is_proto_enum< ::protocol_Chat_OneorMultiple> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol_Chat_OneorMultiple>() {
  return ::protocol_Chat_OneorMultiple_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NetProtocConfig_2eproto__INCLUDED
