// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetProtocConfig.proto

#ifndef PROTOBUF_NetProtocConfig_2eproto__INCLUDED
#define PROTOBUF_NetProtocConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_NetProtocConfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsChatRecordImpl();
void InitDefaultsChatRecord();
void InitDefaultsUser_loginUserImpl();
void InitDefaultsUser_loginUser();
void InitDefaultsUserImpl();
void InitDefaultsUser();
void InitDefaultsChatRecord_GroupImpl();
void InitDefaultsChatRecord_Group();
inline void InitDefaults() {
  InitDefaultsChatRecord();
  InitDefaultsUser_loginUser();
  InitDefaultsUser();
  InitDefaultsChatRecord_Group();
}
}  // namespace protobuf_NetProtocConfig_2eproto
class ChatRecord;
class ChatRecordDefaultTypeInternal;
extern ChatRecordDefaultTypeInternal _ChatRecord_default_instance_;
class ChatRecord_Group;
class ChatRecord_GroupDefaultTypeInternal;
extern ChatRecord_GroupDefaultTypeInternal _ChatRecord_Group_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class User_loginUser;
class User_loginUserDefaultTypeInternal;
extern User_loginUserDefaultTypeInternal _User_loginUser_default_instance_;

enum ChatRecord_contenttype {
  ChatRecord_contenttype_file = 0,
  ChatRecord_contenttype_image = 1,
  ChatRecord_contenttype_text = 2,
  ChatRecord_contenttype_ChatRecord_contenttype_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChatRecord_contenttype_ChatRecord_contenttype_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChatRecord_contenttype_IsValid(int value);
const ChatRecord_contenttype ChatRecord_contenttype_contenttype_MIN = ChatRecord_contenttype_file;
const ChatRecord_contenttype ChatRecord_contenttype_contenttype_MAX = ChatRecord_contenttype_text;
const int ChatRecord_contenttype_contenttype_ARRAYSIZE = ChatRecord_contenttype_contenttype_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatRecord_contenttype_descriptor();
inline const ::std::string& ChatRecord_contenttype_Name(ChatRecord_contenttype value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatRecord_contenttype_descriptor(), value);
}
inline bool ChatRecord_contenttype_Parse(
    const ::std::string& name, ChatRecord_contenttype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatRecord_contenttype>(
    ChatRecord_contenttype_descriptor(), name, value);
}
enum ChatRecord_Group_contenttype {
  ChatRecord_Group_contenttype_file = 0,
  ChatRecord_Group_contenttype_image = 1,
  ChatRecord_Group_contenttype_text = 2,
  ChatRecord_Group_contenttype_ChatRecord_Group_contenttype_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChatRecord_Group_contenttype_ChatRecord_Group_contenttype_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChatRecord_Group_contenttype_IsValid(int value);
const ChatRecord_Group_contenttype ChatRecord_Group_contenttype_contenttype_MIN = ChatRecord_Group_contenttype_file;
const ChatRecord_Group_contenttype ChatRecord_Group_contenttype_contenttype_MAX = ChatRecord_Group_contenttype_text;
const int ChatRecord_Group_contenttype_contenttype_ARRAYSIZE = ChatRecord_Group_contenttype_contenttype_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatRecord_Group_contenttype_descriptor();
inline const ::std::string& ChatRecord_Group_contenttype_Name(ChatRecord_Group_contenttype value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatRecord_Group_contenttype_descriptor(), value);
}
inline bool ChatRecord_Group_contenttype_Parse(
    const ::std::string& name, ChatRecord_Group_contenttype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatRecord_Group_contenttype>(
    ChatRecord_Group_contenttype_descriptor(), name, value);
}
// ===================================================================

class ChatRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatRecord) */ {
 public:
  ChatRecord();
  virtual ~ChatRecord();

  ChatRecord(const ChatRecord& from);

  inline ChatRecord& operator=(const ChatRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatRecord(ChatRecord&& from) noexcept
    : ChatRecord() {
    *this = ::std::move(from);
  }

  inline ChatRecord& operator=(ChatRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatRecord* internal_default_instance() {
    return reinterpret_cast<const ChatRecord*>(
               &_ChatRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChatRecord* other);
  friend void swap(ChatRecord& a, ChatRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatRecord& from);
  void MergeFrom(const ChatRecord& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChatRecord_contenttype contenttype;
  static const contenttype file =
    ChatRecord_contenttype_file;
  static const contenttype image =
    ChatRecord_contenttype_image;
  static const contenttype text =
    ChatRecord_contenttype_text;
  static inline bool contenttype_IsValid(int value) {
    return ChatRecord_contenttype_IsValid(value);
  }
  static const contenttype contenttype_MIN =
    ChatRecord_contenttype_contenttype_MIN;
  static const contenttype contenttype_MAX =
    ChatRecord_contenttype_contenttype_MAX;
  static const int contenttype_ARRAYSIZE =
    ChatRecord_contenttype_contenttype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  contenttype_descriptor() {
    return ChatRecord_contenttype_descriptor();
  }
  static inline const ::std::string& contenttype_Name(contenttype value) {
    return ChatRecord_contenttype_Name(value);
  }
  static inline bool contenttype_Parse(const ::std::string& name,
      contenttype* value) {
    return ChatRecord_contenttype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 time = 1;
  int time_size() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint64 time(int index) const;
  void set_time(int index, ::google::protobuf::uint64 value);
  void add_time(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      time() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_time();

  // repeated .ChatRecord.contenttype type = 3;
  int type_size() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::ChatRecord_contenttype type(int index) const;
  void set_type(int index, ::ChatRecord_contenttype value);
  void add_type(::ChatRecord_contenttype value);
  const ::google::protobuf::RepeatedField<int>& type() const;
  ::google::protobuf::RepeatedField<int>* mutable_type();

  // repeated bytes content = 4;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content(int index) const;
  ::std::string* mutable_content(int index);
  void set_content(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_content(int index, ::std::string&& value);
  #endif
  void set_content(int index, const char* value);
  void set_content(int index, const void* value, size_t size);
  ::std::string* add_content();
  void add_content(const ::std::string& value);
  #if LANG_CXX11
  void add_content(::std::string&& value);
  #endif
  void add_content(const char* value);
  void add_content(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& content() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_content();

  // bool isSelf = 5;
  void clear_isself();
  static const int kIsSelfFieldNumber = 5;
  bool isself() const;
  void set_isself(bool value);

  // @@protoc_insertion_point(class_scope:ChatRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > time_;
  mutable int _time_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> type_;
  mutable int _type_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> content_;
  bool isself_;
  mutable int _cached_size_;
  friend struct ::protobuf_NetProtocConfig_2eproto::TableStruct;
  friend void ::protobuf_NetProtocConfig_2eproto::InitDefaultsChatRecordImpl();
};
// -------------------------------------------------------------------

class User_loginUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User.loginUser) */ {
 public:
  User_loginUser();
  virtual ~User_loginUser();

  User_loginUser(const User_loginUser& from);

  inline User_loginUser& operator=(const User_loginUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User_loginUser(User_loginUser&& from) noexcept
    : User_loginUser() {
    *this = ::std::move(from);
  }

  inline User_loginUser& operator=(User_loginUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User_loginUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User_loginUser* internal_default_instance() {
    return reinterpret_cast<const User_loginUser*>(
               &_User_loginUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(User_loginUser* other);
  friend void swap(User_loginUser& a, User_loginUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User_loginUser* New() const PROTOBUF_FINAL { return New(NULL); }

  User_loginUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const User_loginUser& from);
  void MergeFrom(const User_loginUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(User_loginUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes userNumder = 1;
  void clear_usernumder();
  static const int kUserNumderFieldNumber = 1;
  const ::std::string& usernumder() const;
  void set_usernumder(const ::std::string& value);
  #if LANG_CXX11
  void set_usernumder(::std::string&& value);
  #endif
  void set_usernumder(const char* value);
  void set_usernumder(const void* value, size_t size);
  ::std::string* mutable_usernumder();
  ::std::string* release_usernumder();
  void set_allocated_usernumder(::std::string* usernumder);

  // bool isCurrent = 2;
  void clear_iscurrent();
  static const int kIsCurrentFieldNumber = 2;
  bool iscurrent() const;
  void set_iscurrent(bool value);

  // @@protoc_insertion_point(class_scope:User.loginUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr usernumder_;
  bool iscurrent_;
  mutable int _cached_size_;
  friend struct ::protobuf_NetProtocConfig_2eproto::TableStruct;
  friend void ::protobuf_NetProtocConfig_2eproto::InitDefaultsUser_loginUserImpl();
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const PROTOBUF_FINAL { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef User_loginUser loginUser;

  // accessors -------------------------------------------------------

  // repeated .User.loginUser login = 3;
  int login_size() const;
  void clear_login();
  static const int kLoginFieldNumber = 3;
  const ::User_loginUser& login(int index) const;
  ::User_loginUser* mutable_login(int index);
  ::User_loginUser* add_login();
  ::google::protobuf::RepeatedPtrField< ::User_loginUser >*
      mutable_login();
  const ::google::protobuf::RepeatedPtrField< ::User_loginUser >&
      login() const;

  // @@protoc_insertion_point(class_scope:User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::User_loginUser > login_;
  mutable int _cached_size_;
  friend struct ::protobuf_NetProtocConfig_2eproto::TableStruct;
  friend void ::protobuf_NetProtocConfig_2eproto::InitDefaultsUserImpl();
};
// -------------------------------------------------------------------

class ChatRecord_Group : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChatRecord_Group) */ {
 public:
  ChatRecord_Group();
  virtual ~ChatRecord_Group();

  ChatRecord_Group(const ChatRecord_Group& from);

  inline ChatRecord_Group& operator=(const ChatRecord_Group& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatRecord_Group(ChatRecord_Group&& from) noexcept
    : ChatRecord_Group() {
    *this = ::std::move(from);
  }

  inline ChatRecord_Group& operator=(ChatRecord_Group&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRecord_Group& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatRecord_Group* internal_default_instance() {
    return reinterpret_cast<const ChatRecord_Group*>(
               &_ChatRecord_Group_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ChatRecord_Group* other);
  friend void swap(ChatRecord_Group& a, ChatRecord_Group& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatRecord_Group* New() const PROTOBUF_FINAL { return New(NULL); }

  ChatRecord_Group* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChatRecord_Group& from);
  void MergeFrom(const ChatRecord_Group& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChatRecord_Group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChatRecord_Group_contenttype contenttype;
  static const contenttype file =
    ChatRecord_Group_contenttype_file;
  static const contenttype image =
    ChatRecord_Group_contenttype_image;
  static const contenttype text =
    ChatRecord_Group_contenttype_text;
  static inline bool contenttype_IsValid(int value) {
    return ChatRecord_Group_contenttype_IsValid(value);
  }
  static const contenttype contenttype_MIN =
    ChatRecord_Group_contenttype_contenttype_MIN;
  static const contenttype contenttype_MAX =
    ChatRecord_Group_contenttype_contenttype_MAX;
  static const int contenttype_ARRAYSIZE =
    ChatRecord_Group_contenttype_contenttype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  contenttype_descriptor() {
    return ChatRecord_Group_contenttype_descriptor();
  }
  static inline const ::std::string& contenttype_Name(contenttype value) {
    return ChatRecord_Group_contenttype_Name(value);
  }
  static inline bool contenttype_Parse(const ::std::string& name,
      contenttype* value) {
    return ChatRecord_Group_contenttype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 currtime = 1;
  int currtime_size() const;
  void clear_currtime();
  static const int kCurrtimeFieldNumber = 1;
  ::google::protobuf::uint64 currtime(int index) const;
  void set_currtime(int index, ::google::protobuf::uint64 value);
  void add_currtime(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      currtime() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_currtime();

  // repeated bytes account = 2;
  int account_size() const;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account(int index) const;
  ::std::string* mutable_account(int index);
  void set_account(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_account(int index, ::std::string&& value);
  #endif
  void set_account(int index, const char* value);
  void set_account(int index, const void* value, size_t size);
  ::std::string* add_account();
  void add_account(const ::std::string& value);
  #if LANG_CXX11
  void add_account(::std::string&& value);
  #endif
  void add_account(const char* value);
  void add_account(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& account() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_account();

  // repeated .ChatRecord_Group.contenttype type = 3;
  int type_size() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::ChatRecord_Group_contenttype type(int index) const;
  void set_type(int index, ::ChatRecord_Group_contenttype value);
  void add_type(::ChatRecord_Group_contenttype value);
  const ::google::protobuf::RepeatedField<int>& type() const;
  ::google::protobuf::RepeatedField<int>* mutable_type();

  // repeated bytes content = 4;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content(int index) const;
  ::std::string* mutable_content(int index);
  void set_content(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_content(int index, ::std::string&& value);
  #endif
  void set_content(int index, const char* value);
  void set_content(int index, const void* value, size_t size);
  ::std::string* add_content();
  void add_content(const ::std::string& value);
  #if LANG_CXX11
  void add_content(::std::string&& value);
  #endif
  void add_content(const char* value);
  void add_content(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& content() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_content();

  // @@protoc_insertion_point(class_scope:ChatRecord_Group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > currtime_;
  mutable int _currtime_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> account_;
  ::google::protobuf::RepeatedField<int> type_;
  mutable int _type_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> content_;
  mutable int _cached_size_;
  friend struct ::protobuf_NetProtocConfig_2eproto::TableStruct;
  friend void ::protobuf_NetProtocConfig_2eproto::InitDefaultsChatRecord_GroupImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatRecord

// repeated uint64 time = 1;
inline int ChatRecord::time_size() const {
  return time_.size();
}
inline void ChatRecord::clear_time() {
  time_.Clear();
}
inline ::google::protobuf::uint64 ChatRecord::time(int index) const {
  // @@protoc_insertion_point(field_get:ChatRecord.time)
  return time_.Get(index);
}
inline void ChatRecord::set_time(int index, ::google::protobuf::uint64 value) {
  time_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChatRecord.time)
}
inline void ChatRecord::add_time(::google::protobuf::uint64 value) {
  time_.Add(value);
  // @@protoc_insertion_point(field_add:ChatRecord.time)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ChatRecord::time() const {
  // @@protoc_insertion_point(field_list:ChatRecord.time)
  return time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ChatRecord::mutable_time() {
  // @@protoc_insertion_point(field_mutable_list:ChatRecord.time)
  return &time_;
}

// repeated .ChatRecord.contenttype type = 3;
inline int ChatRecord::type_size() const {
  return type_.size();
}
inline void ChatRecord::clear_type() {
  type_.Clear();
}
inline ::ChatRecord_contenttype ChatRecord::type(int index) const {
  // @@protoc_insertion_point(field_get:ChatRecord.type)
  return static_cast< ::ChatRecord_contenttype >(type_.Get(index));
}
inline void ChatRecord::set_type(int index, ::ChatRecord_contenttype value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChatRecord.type)
}
inline void ChatRecord::add_type(::ChatRecord_contenttype value) {
  type_.Add(value);
  // @@protoc_insertion_point(field_add:ChatRecord.type)
}
inline const ::google::protobuf::RepeatedField<int>&
ChatRecord::type() const {
  // @@protoc_insertion_point(field_list:ChatRecord.type)
  return type_;
}
inline ::google::protobuf::RepeatedField<int>*
ChatRecord::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:ChatRecord.type)
  return &type_;
}

// repeated bytes content = 4;
inline int ChatRecord::content_size() const {
  return content_.size();
}
inline void ChatRecord::clear_content() {
  content_.Clear();
}
inline const ::std::string& ChatRecord::content(int index) const {
  // @@protoc_insertion_point(field_get:ChatRecord.content)
  return content_.Get(index);
}
inline ::std::string* ChatRecord::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:ChatRecord.content)
  return content_.Mutable(index);
}
inline void ChatRecord::set_content(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ChatRecord.content)
  content_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChatRecord::set_content(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ChatRecord.content)
  content_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChatRecord::set_content(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ChatRecord.content)
}
inline void ChatRecord::set_content(int index, const void* value, size_t size) {
  content_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ChatRecord.content)
}
inline ::std::string* ChatRecord::add_content() {
  // @@protoc_insertion_point(field_add_mutable:ChatRecord.content)
  return content_.Add();
}
inline void ChatRecord::add_content(const ::std::string& value) {
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ChatRecord.content)
}
#if LANG_CXX11
inline void ChatRecord::add_content(::std::string&& value) {
  content_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ChatRecord.content)
}
#endif
inline void ChatRecord::add_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ChatRecord.content)
}
inline void ChatRecord::add_content(const void* value, size_t size) {
  content_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ChatRecord.content)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChatRecord::content() const {
  // @@protoc_insertion_point(field_list:ChatRecord.content)
  return content_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChatRecord::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:ChatRecord.content)
  return &content_;
}

// bool isSelf = 5;
inline void ChatRecord::clear_isself() {
  isself_ = false;
}
inline bool ChatRecord::isself() const {
  // @@protoc_insertion_point(field_get:ChatRecord.isSelf)
  return isself_;
}
inline void ChatRecord::set_isself(bool value) {
  
  isself_ = value;
  // @@protoc_insertion_point(field_set:ChatRecord.isSelf)
}

// -------------------------------------------------------------------

// User_loginUser

// bytes userNumder = 1;
inline void User_loginUser::clear_usernumder() {
  usernumder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User_loginUser::usernumder() const {
  // @@protoc_insertion_point(field_get:User.loginUser.userNumder)
  return usernumder_.GetNoArena();
}
inline void User_loginUser::set_usernumder(const ::std::string& value) {
  
  usernumder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:User.loginUser.userNumder)
}
#if LANG_CXX11
inline void User_loginUser::set_usernumder(::std::string&& value) {
  
  usernumder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:User.loginUser.userNumder)
}
#endif
inline void User_loginUser::set_usernumder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usernumder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:User.loginUser.userNumder)
}
inline void User_loginUser::set_usernumder(const void* value, size_t size) {
  
  usernumder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:User.loginUser.userNumder)
}
inline ::std::string* User_loginUser::mutable_usernumder() {
  
  // @@protoc_insertion_point(field_mutable:User.loginUser.userNumder)
  return usernumder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User_loginUser::release_usernumder() {
  // @@protoc_insertion_point(field_release:User.loginUser.userNumder)
  
  return usernumder_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User_loginUser::set_allocated_usernumder(::std::string* usernumder) {
  if (usernumder != NULL) {
    
  } else {
    
  }
  usernumder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usernumder);
  // @@protoc_insertion_point(field_set_allocated:User.loginUser.userNumder)
}

// bool isCurrent = 2;
inline void User_loginUser::clear_iscurrent() {
  iscurrent_ = false;
}
inline bool User_loginUser::iscurrent() const {
  // @@protoc_insertion_point(field_get:User.loginUser.isCurrent)
  return iscurrent_;
}
inline void User_loginUser::set_iscurrent(bool value) {
  
  iscurrent_ = value;
  // @@protoc_insertion_point(field_set:User.loginUser.isCurrent)
}

// -------------------------------------------------------------------

// User

// repeated .User.loginUser login = 3;
inline int User::login_size() const {
  return login_.size();
}
inline void User::clear_login() {
  login_.Clear();
}
inline const ::User_loginUser& User::login(int index) const {
  // @@protoc_insertion_point(field_get:User.login)
  return login_.Get(index);
}
inline ::User_loginUser* User::mutable_login(int index) {
  // @@protoc_insertion_point(field_mutable:User.login)
  return login_.Mutable(index);
}
inline ::User_loginUser* User::add_login() {
  // @@protoc_insertion_point(field_add:User.login)
  return login_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::User_loginUser >*
User::mutable_login() {
  // @@protoc_insertion_point(field_mutable_list:User.login)
  return &login_;
}
inline const ::google::protobuf::RepeatedPtrField< ::User_loginUser >&
User::login() const {
  // @@protoc_insertion_point(field_list:User.login)
  return login_;
}

// -------------------------------------------------------------------

// ChatRecord_Group

// repeated uint64 currtime = 1;
inline int ChatRecord_Group::currtime_size() const {
  return currtime_.size();
}
inline void ChatRecord_Group::clear_currtime() {
  currtime_.Clear();
}
inline ::google::protobuf::uint64 ChatRecord_Group::currtime(int index) const {
  // @@protoc_insertion_point(field_get:ChatRecord_Group.currtime)
  return currtime_.Get(index);
}
inline void ChatRecord_Group::set_currtime(int index, ::google::protobuf::uint64 value) {
  currtime_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChatRecord_Group.currtime)
}
inline void ChatRecord_Group::add_currtime(::google::protobuf::uint64 value) {
  currtime_.Add(value);
  // @@protoc_insertion_point(field_add:ChatRecord_Group.currtime)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ChatRecord_Group::currtime() const {
  // @@protoc_insertion_point(field_list:ChatRecord_Group.currtime)
  return currtime_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ChatRecord_Group::mutable_currtime() {
  // @@protoc_insertion_point(field_mutable_list:ChatRecord_Group.currtime)
  return &currtime_;
}

// repeated bytes account = 2;
inline int ChatRecord_Group::account_size() const {
  return account_.size();
}
inline void ChatRecord_Group::clear_account() {
  account_.Clear();
}
inline const ::std::string& ChatRecord_Group::account(int index) const {
  // @@protoc_insertion_point(field_get:ChatRecord_Group.account)
  return account_.Get(index);
}
inline ::std::string* ChatRecord_Group::mutable_account(int index) {
  // @@protoc_insertion_point(field_mutable:ChatRecord_Group.account)
  return account_.Mutable(index);
}
inline void ChatRecord_Group::set_account(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ChatRecord_Group.account)
  account_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChatRecord_Group::set_account(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ChatRecord_Group.account)
  account_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChatRecord_Group::set_account(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  account_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ChatRecord_Group.account)
}
inline void ChatRecord_Group::set_account(int index, const void* value, size_t size) {
  account_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ChatRecord_Group.account)
}
inline ::std::string* ChatRecord_Group::add_account() {
  // @@protoc_insertion_point(field_add_mutable:ChatRecord_Group.account)
  return account_.Add();
}
inline void ChatRecord_Group::add_account(const ::std::string& value) {
  account_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ChatRecord_Group.account)
}
#if LANG_CXX11
inline void ChatRecord_Group::add_account(::std::string&& value) {
  account_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ChatRecord_Group.account)
}
#endif
inline void ChatRecord_Group::add_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  account_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ChatRecord_Group.account)
}
inline void ChatRecord_Group::add_account(const void* value, size_t size) {
  account_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ChatRecord_Group.account)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChatRecord_Group::account() const {
  // @@protoc_insertion_point(field_list:ChatRecord_Group.account)
  return account_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChatRecord_Group::mutable_account() {
  // @@protoc_insertion_point(field_mutable_list:ChatRecord_Group.account)
  return &account_;
}

// repeated .ChatRecord_Group.contenttype type = 3;
inline int ChatRecord_Group::type_size() const {
  return type_.size();
}
inline void ChatRecord_Group::clear_type() {
  type_.Clear();
}
inline ::ChatRecord_Group_contenttype ChatRecord_Group::type(int index) const {
  // @@protoc_insertion_point(field_get:ChatRecord_Group.type)
  return static_cast< ::ChatRecord_Group_contenttype >(type_.Get(index));
}
inline void ChatRecord_Group::set_type(int index, ::ChatRecord_Group_contenttype value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChatRecord_Group.type)
}
inline void ChatRecord_Group::add_type(::ChatRecord_Group_contenttype value) {
  type_.Add(value);
  // @@protoc_insertion_point(field_add:ChatRecord_Group.type)
}
inline const ::google::protobuf::RepeatedField<int>&
ChatRecord_Group::type() const {
  // @@protoc_insertion_point(field_list:ChatRecord_Group.type)
  return type_;
}
inline ::google::protobuf::RepeatedField<int>*
ChatRecord_Group::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:ChatRecord_Group.type)
  return &type_;
}

// repeated bytes content = 4;
inline int ChatRecord_Group::content_size() const {
  return content_.size();
}
inline void ChatRecord_Group::clear_content() {
  content_.Clear();
}
inline const ::std::string& ChatRecord_Group::content(int index) const {
  // @@protoc_insertion_point(field_get:ChatRecord_Group.content)
  return content_.Get(index);
}
inline ::std::string* ChatRecord_Group::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:ChatRecord_Group.content)
  return content_.Mutable(index);
}
inline void ChatRecord_Group::set_content(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ChatRecord_Group.content)
  content_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChatRecord_Group::set_content(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ChatRecord_Group.content)
  content_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChatRecord_Group::set_content(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ChatRecord_Group.content)
}
inline void ChatRecord_Group::set_content(int index, const void* value, size_t size) {
  content_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ChatRecord_Group.content)
}
inline ::std::string* ChatRecord_Group::add_content() {
  // @@protoc_insertion_point(field_add_mutable:ChatRecord_Group.content)
  return content_.Add();
}
inline void ChatRecord_Group::add_content(const ::std::string& value) {
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ChatRecord_Group.content)
}
#if LANG_CXX11
inline void ChatRecord_Group::add_content(::std::string&& value) {
  content_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ChatRecord_Group.content)
}
#endif
inline void ChatRecord_Group::add_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ChatRecord_Group.content)
}
inline void ChatRecord_Group::add_content(const void* value, size_t size) {
  content_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ChatRecord_Group.content)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChatRecord_Group::content() const {
  // @@protoc_insertion_point(field_list:ChatRecord_Group.content)
  return content_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChatRecord_Group::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:ChatRecord_Group.content)
  return &content_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ChatRecord_contenttype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatRecord_contenttype>() {
  return ::ChatRecord_contenttype_descriptor();
}
template <> struct is_proto_enum< ::ChatRecord_Group_contenttype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatRecord_Group_contenttype>() {
  return ::ChatRecord_Group_contenttype_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NetProtocConfig_2eproto__INCLUDED
